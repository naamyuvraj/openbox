{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/yuvrajmandal/Desktop/openbox/components/ui/animated-counter.tsx"],"sourcesContent":["\"use client\"\n\nimport { useEffect, useState } from \"react\"\n\ninterface AnimatedCounterProps {\n  target: number\n  suffix?: string\n  prefix?: string\n  duration?: number\n  formatAsK?: boolean\n}\n\nexport function AnimatedCounter({\n  target,\n  suffix = \"\",\n  prefix = \"\",\n  duration = 2000,\n  formatAsK = false,\n}: AnimatedCounterProps) {\n  const [count, setCount] = useState(0)\n\n  useEffect(() => {\n    let start = 0\n    const increment = target / (duration / 16)\n    const timer = setInterval(() => {\n      start += increment\n      if (start >= target) {\n        setCount(target)\n        clearInterval(timer)\n      } else {\n        setCount(Math.floor(start))\n      }\n    }, 16)\n\n    return () => clearInterval(timer)\n  }, [target, duration])\n\n  const formatNumber = (num: number) => {\n    if (formatAsK && num >= 1000) {\n      return (num / 1000).toFixed(0) + \"k\"\n    }\n    return num.toLocaleString()\n  }\n\n  return (\n    <span>\n      {prefix}\n      {formatNumber(count)}\n      {suffix}\n    </span>\n  )\n}\n"],"names":[],"mappings":";;;;;AAEA;AAFA;;;AAYO,SAAS,gBAAgB,EAC9B,MAAM,EACN,SAAS,EAAE,EACX,SAAS,EAAE,EACX,WAAW,IAAI,EACf,YAAY,KAAK,EACI;IACrB,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,uOAAQ,EAAC;IAEnC,IAAA,wOAAS,EAAC;QACR,IAAI,QAAQ;QACZ,MAAM,YAAY,SAAS,CAAC,WAAW,EAAE;QACzC,MAAM,QAAQ,YAAY;YACxB,SAAS;YACT,IAAI,SAAS,QAAQ;gBACnB,SAAS;gBACT,cAAc;YAChB,OAAO;gBACL,SAAS,KAAK,KAAK,CAAC;YACtB;QACF,GAAG;QAEH,OAAO,IAAM,cAAc;IAC7B,GAAG;QAAC;QAAQ;KAAS;IAErB,MAAM,eAAe,CAAC;QACpB,IAAI,aAAa,OAAO,MAAM;YAC5B,OAAO,CAAC,MAAM,IAAI,EAAE,OAAO,CAAC,KAAK;QACnC;QACA,OAAO,IAAI,cAAc;IAC3B;IAEA,qBACE,oQAAC;;YACE;YACA,aAAa;YACb;;;;;;;AAGP","debugId":null}}]
}